/*
 * This file is generated by jOOQ.
 */
package com.github.kreker721425.shop.db.tables;


import com.github.kreker721425.shop.db.Keys;
import com.github.kreker721425.shop.db.Shop;
import com.github.kreker721425.shop.db.enums.OperationEnum;
import com.github.kreker721425.shop.db.enums.TableEnum;
import com.github.kreker721425.shop.db.tables.records.HistoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * История операций
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class History extends TableImpl<HistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shop.history</code>
     */
    public static final History HISTORY = new History();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoryRecord> getRecordType() {
        return HistoryRecord.class;
    }

    /**
     * The column <code>shop.history.id</code>. Идентификатор
     */
    public final TableField<HistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор");

    /**
     * The column <code>shop.history.table_name</code>. Название таблицы
     */
    public final TableField<HistoryRecord, TableEnum> TABLE_NAME = createField(DSL.name("table_name"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.github.kreker721425.shop.db.enums.TableEnum.class), this, "Название таблицы");

    /**
     * The column <code>shop.history.operation</code>. Операция
     */
    public final TableField<HistoryRecord, OperationEnum> OPERATION = createField(DSL.name("operation"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.github.kreker721425.shop.db.enums.OperationEnum.class), this, "Операция");

    /**
     * The column <code>shop.history.old_value</code>. Старое значение
     */
    public final TableField<HistoryRecord, String> OLD_VALUE = createField(DSL.name("old_value"), SQLDataType.CLOB, this, "Старое значение");

    /**
     * The column <code>shop.history.new_value</code>. Новое значение
     */
    public final TableField<HistoryRecord, String> NEW_VALUE = createField(DSL.name("new_value"), SQLDataType.CLOB, this, "Новое значение");

    /**
     * The column <code>shop.history.created_at</code>. Время создания
     */
    public final TableField<HistoryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Время создания");

    /**
     * The column <code>shop.history.user_id</code>. Идентификатор пользователя
     */
    public final TableField<HistoryRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор пользователя");

    private History(Name alias, Table<HistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private History(Name alias, Table<HistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("История операций"), TableOptions.table());
    }

    /**
     * Create an aliased <code>shop.history</code> table reference
     */
    public History(String alias) {
        this(DSL.name(alias), HISTORY);
    }

    /**
     * Create an aliased <code>shop.history</code> table reference
     */
    public History(Name alias) {
        this(alias, HISTORY);
    }

    /**
     * Create a <code>shop.history</code> table reference
     */
    public History() {
        this(DSL.name("history"), null);
    }

    public <O extends Record> History(Table<O> child, ForeignKey<O, HistoryRecord> key) {
        super(child, key, HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Shop.SHOP;
    }

    @Override
    public Identity<HistoryRecord, Long> getIdentity() {
        return (Identity<HistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<HistoryRecord> getPrimaryKey() {
        return Keys.HISTORY_ID_PK;
    }

    @Override
    public List<UniqueKey<HistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<HistoryRecord>>asList(Keys.HISTORY_ID_PK);
    }

    @Override
    public List<ForeignKey<HistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<HistoryRecord, ?>>asList(Keys.HISTORY__USER_ID__FK);
    }

    private transient Users _users;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.HISTORY__USER_ID__FK);

        return _users;
    }

    @Override
    public History as(String alias) {
        return new History(DSL.name(alias), this);
    }

    @Override
    public History as(Name alias) {
        return new History(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public History rename(String name) {
        return new History(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public History rename(Name name) {
        return new History(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, TableEnum, OperationEnum, String, String, LocalDateTime, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
