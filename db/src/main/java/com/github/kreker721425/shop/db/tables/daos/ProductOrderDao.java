/*
 * This file is generated by jOOQ.
 */
package com.github.kreker721425.shop.db.tables.daos;


import com.github.kreker721425.shop.db.tables.ProductOrder;
import com.github.kreker721425.shop.db.tables.records.ProductOrderRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * Состав заказа
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductOrderDao extends DAOImpl<ProductOrderRecord, com.github.kreker721425.shop.db.tables.pojos.ProductOrder, Long> {

    /**
     * Create a new ProductOrderDao without any configuration
     */
    public ProductOrderDao() {
        super(ProductOrder.PRODUCT_ORDER, com.github.kreker721425.shop.db.tables.pojos.ProductOrder.class);
    }

    /**
     * Create a new ProductOrderDao with an attached configuration
     */
    public ProductOrderDao(Configuration configuration) {
        super(ProductOrder.PRODUCT_ORDER, com.github.kreker721425.shop.db.tables.pojos.ProductOrder.class, configuration);
    }

    @Override
    public Long getId(com.github.kreker721425.shop.db.tables.pojos.ProductOrder object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductOrder.PRODUCT_ORDER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchById(Long... values) {
        return fetch(ProductOrder.PRODUCT_ORDER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.github.kreker721425.shop.db.tables.pojos.ProductOrder fetchOneById(Long value) {
        return fetchOne(ProductOrder.PRODUCT_ORDER.ID, value);
    }

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchRangeOfProductId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductOrder.PRODUCT_ORDER.PRODUCT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchByProductId(Long... values) {
        return fetch(ProductOrder.PRODUCT_ORDER.PRODUCT_ID, values);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchRangeOfOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductOrder.PRODUCT_ORDER.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchByOrderId(Long... values) {
        return fetch(ProductOrder.PRODUCT_ORDER.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>count BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchRangeOfCount(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(ProductOrder.PRODUCT_ORDER.COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>count IN (values)</code>
     */
    public List<com.github.kreker721425.shop.db.tables.pojos.ProductOrder> fetchByCount(Long... values) {
        return fetch(ProductOrder.PRODUCT_ORDER.COUNT, values);
    }
}
