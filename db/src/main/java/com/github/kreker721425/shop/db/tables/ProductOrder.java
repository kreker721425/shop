/*
 * This file is generated by jOOQ.
 */
package com.github.kreker721425.shop.db.tables;


import com.github.kreker721425.shop.db.Keys;
import com.github.kreker721425.shop.db.Shop;
import com.github.kreker721425.shop.db.tables.records.ProductOrderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Состав заказа
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductOrder extends TableImpl<ProductOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shop.product_order</code>
     */
    public static final ProductOrder PRODUCT_ORDER = new ProductOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductOrderRecord> getRecordType() {
        return ProductOrderRecord.class;
    }

    /**
     * The column <code>shop.product_order.product_id</code>. Идентификатор продукта
     */
    public final TableField<ProductOrderRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор продукта");

    /**
     * The column <code>shop.product_order.order_id</code>. Идентификатор заказа
     */
    public final TableField<ProductOrderRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор заказа");

    /**
     * The column <code>shop.product_order.count</code>. Количество продукта в заказе
     */
    public final TableField<ProductOrderRecord, Long> COUNT = createField(DSL.name("count"), SQLDataType.BIGINT.nullable(false), this, "Количество продукта в заказе");

    private ProductOrder(Name alias, Table<ProductOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductOrder(Name alias, Table<ProductOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Состав заказа"), TableOptions.table());
    }

    /**
     * Create an aliased <code>shop.product_order</code> table reference
     */
    public ProductOrder(String alias) {
        this(DSL.name(alias), PRODUCT_ORDER);
    }

    /**
     * Create an aliased <code>shop.product_order</code> table reference
     */
    public ProductOrder(Name alias) {
        this(alias, PRODUCT_ORDER);
    }

    /**
     * Create a <code>shop.product_order</code> table reference
     */
    public ProductOrder() {
        this(DSL.name("product_order"), null);
    }

    public <O extends Record> ProductOrder(Table<O> child, ForeignKey<O, ProductOrderRecord> key) {
        super(child, key, PRODUCT_ORDER);
    }

    @Override
    public Schema getSchema() {
        return Shop.SHOP;
    }

    @Override
    public List<ForeignKey<ProductOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductOrderRecord, ?>>asList(Keys.PRODUCT_ORDER__PRODUCT_ID__FK, Keys.PRODUCT_ORDER__ORDER_ID__FK);
    }

    private transient Product _product;
    private transient Order _order;

    public Product product() {
        if (_product == null)
            _product = new Product(this, Keys.PRODUCT_ORDER__PRODUCT_ID__FK);

        return _product;
    }

    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.PRODUCT_ORDER__ORDER_ID__FK);

        return _order;
    }

    @Override
    public ProductOrder as(String alias) {
        return new ProductOrder(DSL.name(alias), this);
    }

    @Override
    public ProductOrder as(Name alias) {
        return new ProductOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOrder rename(String name) {
        return new ProductOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOrder rename(Name name) {
        return new ProductOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
