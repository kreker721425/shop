/*
 * This file is generated by jOOQ.
 */
package com.github.kreker721425.shop.db.tables;


import com.github.kreker721425.shop.db.Keys;
import com.github.kreker721425.shop.db.Shop;
import com.github.kreker721425.shop.db.tables.records.OrderRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Заказ
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shop.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>shop.order.id</code>. Идентификатор заказа
     */
    public final TableField<OrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "Идентификатор заказа");

    /**
     * The column <code>shop.order.created_at</code>. Время создания заказа
     */
    public final TableField<OrderRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Время создания заказа");

    /**
     * The column <code>shop.order.price</code>. Стоимость заказа
     */
    public final TableField<OrderRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "Стоимость заказа");

    /**
     * The column <code>shop.order.client_id</code>. Идентификатор клиента заказа
     */
    public final TableField<OrderRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор клиента заказа");

    /**
     * The column <code>shop.order.bonus_count</code>. Количество бонусных баллов за заказ
     */
    public final TableField<OrderRecord, BigDecimal> BONUS_COUNT = createField(DSL.name("bonus_count"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field("0", SQLDataType.NUMERIC)), this, "Количество бонусных баллов за заказ");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Заказ"), TableOptions.table());
    }

    /**
     * Create an aliased <code>shop.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>shop.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>shop.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return Shop.SHOP;
    }

    @Override
    public Identity<OrderRecord, Long> getIdentity() {
        return (Identity<OrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_ID_PK;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.ORDER_ID_PK);
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderRecord, ?>>asList(Keys.ORDER__CLIENT_ID__FK);
    }

    private transient Client _client;

    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.ORDER__CLIENT_ID__FK);

        return _client;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDateTime, BigDecimal, Long, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
